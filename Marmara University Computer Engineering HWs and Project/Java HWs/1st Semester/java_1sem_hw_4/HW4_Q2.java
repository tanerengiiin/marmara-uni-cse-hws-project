import java.util.Scanner; // Scanner must be imported

public class HW4_Q2 {
	public static void main(String [] args) {
		// This is the file for the Github Repository.
		// This program shows whether the entered number conforms to the luhn formula or not.
		Scanner input=new Scanner(System.in); // Scanner must be defined 
		String number=input.nextLine(); // Gets a number from the user in String format
		
		String newNumber="";
		for(int i=0; i<number.length(); i++) {
			if(number.charAt(i)!=' ') { // A new number is generated by discarding the spaces of the incoming number.
				newNumber+=number.charAt(i);
			}
		}
		boolean check=true;
		for(int i=0; i<newNumber.length(); i++) {
			if(newNumber.charAt(i)>'9' || newNumber.charAt(i)<'0') {
				check=false; // If there is a value that does not meet the conditions in the received number, it will be false directly
			}
		}
		String dNumber=""; 
		String lNumber=""; 
		if(check) {
			//All values ​​are checked starting from index 0 of the received number
			for(int i=0; i<newNumber.length(); i++) {
				if(newNumber.length()%2==0) {
					// If the length of the number is even, the operation is applied according to the luhn formula at the points where i is even.
					if(i%2==0) {
						int temp=(newNumber.charAt(i)-'0')*2;
						if(temp>9) { //if the transaction occurred in temp is greater than 9, then 9 is subtracted from the result
							temp-=9;
						}
						lNumber+=temp;
						dNumber+=newNumber.charAt(i);
					}else {
						lNumber+=newNumber.charAt(i);
						dNumber+="_"; // If no value is supplied in i, put _ here for dNumber
					}
				}else {
					// If the length of the number is odd, the operation is applied according to the luhn formula at the points where i is odd.
					if(i%2==0) {
						lNumber+=newNumber.charAt(i);
						dNumber+="_";
					}else {
						int temp=(newNumber.charAt(i)-'0')*2;
						if(temp>9) {
							temp-=9;
						}
						lNumber+=temp;
						dNumber+=newNumber.charAt(i);
					}
				}
			}
			System.out.println("DNumber:"+dNumber);
			System.out.println("LNumber:"+lNumber);
			//The result is printed according to the value returned by the validateNumber method
			if(validateNumber(newNumber))
				System.out.println("Number is Valid");
			else
				System.out.println("Number is Invalid");
		}else {
			System.out.println("Invalid Input !");
		}
	}
	
	public static boolean validateNumber (String number) { // a method that returns a boolean
		int[] reverseNumber=new int[number.length()]; //An array is defined as the length of the received number
		for(int i=number.length()-1,j=0; j<number.length(); i--, j++) { //the array is populated starting from the reverse of the number
			reverseNumber[j]=number.charAt(i)-'0'; //The decimal value is found by subtracting the number's index value from '0'
		}
		int totalNumber=0;
		for(int i=0; i<reverseNumber.length; i++) {
			if(i%2==0) { //The element of the array where i is even is added directly
				totalNumber+=reverseNumber[i];
			}else {//The element of the array where i is odd is processed
				if(reverseNumber[i]*2>9) {//If the array element multiplied by 2 is greater than 9, 9 is subtracted from the result.
					totalNumber+=(reverseNumber[i]*2)-9;
				}
				else {
					totalNumber+=reverseNumber[i]*2; //If the element of the array multiplied by 2 is not greater than 9, the result is added directly
				}
			}
		}
		if(totalNumber%10==0) {
			//If the total is divisible by 10, the entered input is correct according to the Luhn algorithm.
			return true;
		}else {
			return false;
		}
		
	}
}
